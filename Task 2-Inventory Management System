import tkinter as tk
from tkinter import ttk, messagebox
import sqlite3


# Initialize the Database
def initialize_db():
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()

    # Drop the existing users table (if it exists)
    cursor.execute("DROP TABLE IF EXISTS users")

    # Recreate the users table with the role column
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        username TEXT PRIMARY KEY,
        password TEXT NOT NULL,
        role TEXT NOT NULL CHECK(role IN ('admin', 'employee'))
    )
    """)

    # Create the products table
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        price REAL NOT NULL,
        stock INTEGER NOT NULL
    )
    """)

    # Insert default admin and employee users
    cursor.execute("INSERT OR IGNORE INTO users (username, password, role) VALUES ('admin', 'admin', 'admin')")
    cursor.execute("INSERT OR IGNORE INTO users (username, password, role) VALUES ('employee', 'employee', 'employee')")

    conn.commit()
    conn.close()




# Authenticate User
def authenticate(username, password):
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("SELECT role FROM users WHERE username = ? AND password = ?", (username, password))
    user = cursor.fetchone()
    conn.close()
    return user


# Login Window
def login_window():
    def login():
        username = entry_username.get()
        password = entry_password.get()
        user = authenticate(username, password)

        if user:
            role = user[0]
            messagebox.showinfo("Login Successful", f"Welcome, {username}! Role: {role.capitalize()}")
            root.destroy()
            main_window(role)
        else:
            messagebox.showerror("Login Failed", "Invalid username or password")

    root = tk.Tk()
    root.title("Login")

    tk.Label(root, text="Username").grid(row=0, column=0, padx=10, pady=5)
    entry_username = tk.Entry(root)
    entry_username.grid(row=0, column=1, padx=10, pady=5)

    tk.Label(root, text="Password").grid(row=1, column=0, padx=10, pady=5)
    entry_password = tk.Entry(root, show="*")
    entry_password.grid(row=1, column=1, padx=10, pady=5)

    tk.Button(root, text="Login", command=login).grid(row=2, column=0, columnspan=2, pady=10)

    root.mainloop()


# Main Window
def main_window(role):
    def add_product():
        name = entry_name.get()
        description = entry_description.get()
        price = entry_price.get()
        stock = entry_stock.get()

        if not name or not price or not stock:
            messagebox.showerror("Input Error", "Name, Price, and Stock are required!")
            return

        try:
            price = float(price)
            stock = int(stock)
        except ValueError:
            messagebox.showerror("Input Error", "Price must be a number, and Stock must be an integer!")
            return

        conn = sqlite3.connect("inventory.db")
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO products (name, description, price, stock) VALUES (?, ?, ?, ?)",
            (name, description, price, stock),
        )
        conn.commit()
        conn.close()
        messagebox.showinfo("Success", f"Product '{name}' added successfully!")
        clear_entries()
        refresh_products()

    def delete_product():
        if role != "admin":
            messagebox.showerror("Permission Denied", "Only admins can delete products!")
            return

        selected = tree_products.selection()
        if not selected:
            messagebox.showerror("Delete Error", "No product selected!")
            return

        product_id = tree_products.item(selected[0])["values"][0]
        conn = sqlite3.connect("inventory.db")
        cursor = conn.cursor()
        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()
        conn.close()
        messagebox.showinfo("Success", f"Product ID {product_id} deleted successfully!")
        refresh_products()

    def refresh_products():
        for row in tree_products.get_children():
            tree_products.delete(row)

        conn = sqlite3.connect("inventory.db")
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM products")
        rows = cursor.fetchall()
        conn.close()

        for row in rows:
            tree_products.insert("", tk.END, values=row)

    def clear_entries():
        entry_name.delete(0, tk.END)
        entry_description.delete(0, tk.END)
        entry_price.delete(0, tk.END)
        entry_stock.delete(0, tk.END)

    window = tk.Tk()
    window.title("Inventory Management System")

    # Product Input Fields
    tk.Label(window, text="Product Name").grid(row=0, column=0, padx=10, pady=5)
    global entry_name
    entry_name = tk.Entry(window)
    entry_name.grid(row=0, column=1, padx=10, pady=5)

    tk.Label(window, text="Description").grid(row=1, column=0, padx=10, pady=5)
    global entry_description
    entry_description = tk.Entry(window)
    entry_description.grid(row=1, column=1, padx=10, pady=5)

    tk.Label(window, text="Price").grid(row=2, column=0, padx=10, pady=5)
    global entry_price
    entry_price = tk.Entry(window)
    entry_price.grid(row=2, column=1, padx=10, pady=5)

    tk.Label(window, text="Stock").grid(row=3, column=0, padx=10, pady=5)
    global entry_stock
    entry_stock = tk.Entry(window)
    entry_stock.grid(row=3, column=1, padx=10, pady=5)

    # Buttons
    tk.Button(window, text="Add Product", command=add_product).grid(row=4, column=0, pady=10)
    tk.Button(window, text="Delete Product", command=delete_product).grid(row=4, column=1, pady=10)

    # Product TreeView
    global tree_products
    tree_products = ttk.Treeview(window, columns=("ID", "Name", "Description", "Price", "Stock"), show="headings")
    tree_products.heading("ID", text="ID")
    tree_products.heading("Name", text="Name")
    tree_products.heading("Description", text="Description")
    tree_products.heading("Price", text="Price")
    tree_products.heading("Stock", text="Stock")
    tree_products.grid(row=5, column=0, columnspan=2, pady=10)

    refresh_products()
    window.mainloop()


# Initialize Database
initialize_db()

# Launch Login Window
login_window()
